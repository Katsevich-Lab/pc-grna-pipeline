remaining_modalities
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
mm_odm_sub@modalities[[modality]] <- modality_odm[feats_to_keep,]
}
modalities
# iii. perform feature ID cleanup; remove underscores and replace with dashes for all features
for (modality in modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
modality_odm@ondisc_matrix@feature_ids <- gsub(pattern = "_", replacement = "-", x = modality_odm@ondisc_matrix@feature_ids, fixed = TRUE)
row.names(modality_odm@feature_covariates) <- gsub(pattern = "_", replacement = "-", x = row.names(modality_odm@feature_covariates), fixed = TRUE)
if (modality == "grna_assignment") {
modality_odm <- mutate_cell_covariates(modality_odm, assigned_grna = gsub(pattern = "_", replacement = "-", x = assigned_grna, fixed = TRUE))
}
mm_odm_sub@modalities[[modality]] <- modality_odm
}
modality <- remaining_modalities[1]
modality_odm <- get_modality(mm_odm_sub, modality)
# iv. add the mimosca/nb formula objects to each response modality
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
if (modality == "protein") {
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs_protein[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs_protein[[paper]]
modality_odm@misc[["sceptre_formula"]] <- sceptre_formula_objs_protein[[paper]]
} else {
if (dataset %in% c("enhancer_screen_chr11", "enhancer_screen_chr8") && paper == "schraivogel") { # special case: dataset is schraivogel/enhancer_screen_chr11 or schraivogel/enhancer_screen_chr8
modality_odm@misc[["mimosca_formula"]] <- formula(~ n_nonzero + n_umis + 0)
modality_odm@misc[["nb_regression_formula"]] <- "~ offset(log(n_umis)) + log(n_nonzero)"
modality_odm@misc[["sceptre_formula"]] <- formula(~ log(response_n_umis) + log(response_n_nonzero))
} else {
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs[[paper]]
modality_odm@misc[["sceptre_formula"]] <- sceptre_formula_objs[[paper]]
}
}
mm_odm_sub@modalities[[modality]] <- modality_odm
}
# Write all modalities
lowmoi::save_all_modalities(multimodal_odm = mm_odm_sub, paper = paper, dataset = dataset, metadata_file_name = "metadata_qc.rds")
# v. create a multimodal ondisc matrix free of redundancy and write
mm_odm_sub_proc <- lowmoi::process_multimodal_odm(mm_odm_sub)
mm_odm_sub_proc@global_misc[["formula"]] <- global_formula_objs[[paper]]
mm_odm_sub_proc@global_misc[["moi"]] <- "low"
save_multimodal_odm(multimodal_odm = mm_odm_sub_proc,
multimodal_metadata_fp = multimodal_metadata_fp)
# vi. write trans pairs
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
gene_modality <- mm_odm_sub_proc |> get_modality("gene")
grna_feature_df <- grna_assignment_modality |>
ondisc::get_feature_covariates() |>
dplyr::filter(n_nonzero >= 10) # require each individual gRNA to have at least 10 expressed cells
grna_groups_to_keep <- grna_groups_to_keep[grna_groups_to_keep != "non-targeting"]
grna_groups_to_keep
# vi. write trans pairs
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
gene_modality <- mm_odm_sub_proc |> get_modality("gene")
grna_feature_df <- grna_assignment_modality |>
ondisc::get_feature_covariates() |>
dplyr::filter(n_nonzero >= 10) # require each individual gRNA to have at least 10 expressed cells
head(grna_feature_df)
grna_feature_df
head(grna_feature_df)
grna_assignment_modality
gene_modality
head(grna_feature_df)
head(grna_groups_to_keep)
grna_groups_to_keep
grna_groups_to_keep
grna_groups_to_keep
grna_groups_to_keep <- grna_feature_df$target
grna_groups_to_keep
grna_groups_to_keep <- unique(grna_feature_df$target)
grna_groups_to_keep
grna_groups_to_keep <- grna_groups_to_keep[grna_groups_to_keep != "non-targeting"]
grna_groups_to_keep
grna_groups_to_keep
remaining_modalities
modality_odm <- get_modality(mm_odm_sub, modality)
modality_odm
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
feats_to_keep
head(grna_groups_to_keep)
tail(grna_groups_to_keep)
grna_groups_to_keep
feats_to_keep
modality_odm |> get_feature_ids(
)
modality_odm |> get_feature_ids()
head(grna_groups_to_keep)
tail(grna_groups_to_keep)
expand.grid(response_id = modality_odm |> get_feature_ids(),
grna_group = grna_groups_to_keep)
trans_pairs <- expand.grid(response_id = modality_odm |> get_feature_ids(),
grna_group = grna_groups_to_keep)
head(trans_pairs)
feats_to_keep
trans_pairs <- expand.grid(response_id = feats_to_keep,
grna_group = grna_groups_to_keep)
trans_pairs
trans_pairs
head(trans_pairs)
paper_dir
dataset
modality
head(trans_pairs)
paper_dir
paste0(paper_dir, dataset, "/", modality, "/trans_pairs_grouped.rds")
paste0(paper_dir, dataset, "/", modality, "/trans_pairs_grouped.rds")
head(trans_pairs)
trans_pairs <- expand.grid(response_id = feats_to_keep,
grna_group = grna_groups_to_keep) |>
dplyr::arrange(grna_group)
head(trans_pairs)
trans_pairs
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
# This script performs cell-wise QC, among other operations, on low MOI data.
# We (i) restrict attention to cells that received a single grna (as determined by the original authors) and
# (ii) filter for cells that passed other QC metrics implemented by the original authors (stored in the "passed_qc" column).
# set params
FRAC_EXPRESSED_TRHESH <- 0.005
# 1.i) Set the MIMOSCA formula objects
mimosca_formula_objs <- list(# frangieh = formula(~ n_nonzero + n_umis + phase + batch + 0),
frangieh = formula(~ n_nonzero + n_umis + 0),
schraivogel = formula(~ n_nonzero + n_umis + batch + 0),
papalexi = formula(~ n_nonzero + n_umis + bio_rep + p_mito + 0),
liscovitch = formula(~ n_nonzero + n_fragments + 0),
simulated = formula(~ n_nonzero + n_umis + 0))
mimosca_formula_objs_protein <- list(# frangieh = formula(~ n_umis + phase + batch + 0),
frangieh = formula(~ n_umis + 0),
papalexi = formula(~ n_umis + bio_rep + p_mito + 0))
# 1.ii) Set the NB regression formula objects
nb_regression_formula_objs <- list(# frangieh = "~log(n_umis) + log(n_nonzero) + phase + batch",
frangieh = "~log(n_umis) + log(n_nonzero)",
schraivogel = "~ log(n_umis) + log(n_nonzero) + batch",
papalexi = "~ log(n_umis) + log(n_nonzero) + bio_rep + p_mito",
liscovitch = "~ log(n_fragments)",
simulated = "~log(n_umis) + log(n_nonzero)")
nb_regression_formula_objs_protein <- list(# frangieh = "~ offset(log(n_umis)) + phase + batch",
frangieh = "~ offset(log(n_umis))",
papalexi = "~ offset(log(n_umis)) + bio_rep + p_mito")
# 1.iii) Set the sceptre formula objects
sceptre_formula_objs <- list(# frangieh = ~ log(response_n_umis) + log(response_n_nonzero) + phase + batch,
frangieh = ~ log(response_n_umis) + log(response_n_nonzero),
schraivogel = ~ log(response_n_umis) + log(response_n_nonzero) + batch,
papalexi = ~ log(response_n_umis) + log(response_n_nonzero) + bio_rep + p_mito,
liscovitch = ~ log(response_n_fragments),
simulated = ~ log(response_n_umis) + log(response_n_nonzero))
sceptre_formula_objs_protein <- list(# frangieh = ~ log(response_n_umis) + phase + batch,
frangieh = ~ log(response_n_umis),
papalexi = ~ log(response_n_umis) + bio_rep + p_mito)
# 1. iv) Set the global formula object (for use in the sceptre pipeline)
global_formula_objs <- list(# frangieh = ~ log(gene_n_umis) + log(gene_n_nonzero) + phase + batch,
frangieh = ~ log(gene_n_umis) + log(gene_n_nonzero),
schraivogel = ~ log(gene_n_umis) + log(gene_n_nonzero) + batch,
papalexi = ~ log(gene_n_umis) + log(gene_n_nonzero) + bio_rep + p_mito,
liscovitch = ~ log(gene_n_fragments),
simulated = ~ log(gene_n_umis) + log(gene_n_nonzero))
# 2) loop over datasets, loading all modalities
for (paper in papers) {
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
# load the dataset into a multimodal ODM
print(paste0("paper: ", paper, " dataset: ", dataset))
multimodal_metadata_fp <- paste0(paper_dir, dataset, "/multimodal_metadata.rds")
if (file.exists(multimodal_metadata_fp)) file.remove(multimodal_metadata_fp)
mm_odm <- lowmoi::read_all_modalities(paper, dataset)
# i. perform cell QC; restrict attention to 1 grna/cell and "passed_qc" cells (if applicable)
global_cell_covariates <- mm_odm |> get_cell_covariates()
cell_logical_v <- global_cell_covariates$grna_assignment_n_nonzero == 1
passed_qc_v <- grepl(pattern = "passed_qc", x = colnames(global_cell_covariates))
if (any(passed_qc_v)) {
passed_qc <- global_cell_covariates[, which(passed_qc_v)[1]]
cell_logical_v <- cell_logical_v & passed_qc
}
mm_odm_sub <- mm_odm[,cell_logical_v]
# ii. perform feature QC
modalities <- names(mm_odm_sub@modalities)
# grna assignment modality: keep features expressed in N_CELLS_PER_GRNA_THRESH cells. Also, add a "grna_assigned" column to the cell covariate matrix.
grna_assign_modality <- get_modality(mm_odm_sub, "grna_assignment")
grna_assign_mat <- lowmoi::load_whole_odm(grna_assign_modality)
assigned_grna <- apply(X = grna_assign_mat,
MARGIN = 2,
FUN = function(col) names(which.max(col))) |> unname()
grna_assign_modality <- grna_assign_modality |>
mutate_cell_covariates(assigned_grna = assigned_grna)
if (paper == "schraivogel") {
grna_assign_modality <- grna_assign_modality |>
mutate_feature_covariates(target = ifelse(is.na(known_effect), target, known_effect),
known_effect = NULL)
}
# grna expression modality (if applicable): keep the same features as above
if ("grna_expression" %in% modalities) {
grna_expression_modality <- get_modality(mm_odm_sub, "grna_expression")
if (paper == "schraivogel") {
grna_expression_modality <- grna_expression_modality |>
mutate_feature_covariates(target = known_effect, known_effect = NULL)
}
}
# response modalities: keep features expressed in FRAC_EXPRESSED_TRHESH of cells
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
mm_odm_sub@modalities[[modality]] <- modality_odm[feats_to_keep,]
}
# iii. perform feature ID cleanup; remove underscores and replace with dashes for all features
for (modality in modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
modality_odm@ondisc_matrix@feature_ids <- gsub(pattern = "_", replacement = "-", x = modality_odm@ondisc_matrix@feature_ids, fixed = TRUE)
row.names(modality_odm@feature_covariates) <- gsub(pattern = "_", replacement = "-", x = row.names(modality_odm@feature_covariates), fixed = TRUE)
if (modality == "grna_assignment") {
modality_odm <- mutate_cell_covariates(modality_odm, assigned_grna = gsub(pattern = "_", replacement = "-", x = assigned_grna, fixed = TRUE))
}
mm_odm_sub@modalities[[modality]] <- modality_odm
}
# iv. add the mimosca/nb formula objects to each response modality
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
if (modality == "protein") {
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs_protein[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs_protein[[paper]]
modality_odm@misc[["sceptre_formula"]] <- sceptre_formula_objs_protein[[paper]]
} else {
if (dataset %in% c("enhancer_screen_chr11", "enhancer_screen_chr8") && paper == "schraivogel") { # special case: dataset is schraivogel/enhancer_screen_chr11 or schraivogel/enhancer_screen_chr8
modality_odm@misc[["mimosca_formula"]] <- formula(~ n_nonzero + n_umis + 0)
modality_odm@misc[["nb_regression_formula"]] <- "~ offset(log(n_umis)) + log(n_nonzero)"
modality_odm@misc[["sceptre_formula"]] <- formula(~ log(response_n_umis) + log(response_n_nonzero))
} else {
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs[[paper]]
modality_odm@misc[["sceptre_formula"]] <- sceptre_formula_objs[[paper]]
}
}
mm_odm_sub@modalities[[modality]] <- modality_odm
}
# Write all modalities
lowmoi::save_all_modalities(multimodal_odm = mm_odm_sub, paper = paper, dataset = dataset, metadata_file_name = "metadata_qc.rds")
# v. create a multimodal ondisc matrix free of redundancy and write
mm_odm_sub_proc <- lowmoi::process_multimodal_odm(mm_odm_sub)
mm_odm_sub_proc@global_misc[["formula"]] <- global_formula_objs[[paper]]
mm_odm_sub_proc@global_misc[["moi"]] <- "low"
save_multimodal_odm(multimodal_odm = mm_odm_sub_proc,
multimodal_metadata_fp = multimodal_metadata_fp)
# vi. write trans pairs
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
grna_feature_df <- grna_assignment_modality |>
ondisc::get_feature_covariates() |>
dplyr::filter(n_nonzero >= 10) # require each individual gRNA to have at least 10 expressed cells
grna_groups_to_keep <- unique(grna_feature_df$target)
grna_groups_to_keep <- grna_groups_to_keep[grna_groups_to_keep != "non-targeting"]
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
trans_pairs <- expand.grid(response_id = feats_to_keep,
grna_group = grna_groups_to_keep) |>
dplyr::arrange(grna_group)
saveRDS(object = trans_pairs, file = paste0(paper_dir, dataset, "/", modality, "/trans_pairs_grouped.rds"))
}
gene_modality <- mm_odm_sub_proc |> get_modality("gene")
# vii. write the positive control pairs (at the level of the paper-dataset)
if (paper %in% c("frangieh", "papalexi")) {
# grouped pairs
targets <- intersect(grna_feature_df |> dplyr::pull(target),
gene_modality |> ondisc::get_feature_ids())
pc_pairs <- data.frame(grna_group = targets, response_id = targets)
# ungrouped pairs
ungroup_map <- data.frame(grna_id = row.names(grna_feature_df),
grna_group = grna_feature_df$target)
ungroup_pc_pairs <- dplyr::left_join(ungroup_map, pc_pairs, by = "grna_group") |>
na.omit() |>
dplyr::select(grna_id, response_id)
saveRDS(pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_grouped.rds"))
saveRDS(ungroup_pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_single.rds"))
}
if (paper == "schraivogel") {
targets <- intersect(grna_feature_df |> dplyr::pull(known_effect),
gene_modality |> ondisc::get_feature_ids())
ungroup_pairs_all <- grna_feature_df |>
dplyr::filter(known_effect %in% targets)
# first, grouped pairs
pc_pairs <- ungroup_pairs_all |>
dplyr::select(grna_group = target, response_id = known_effect) |>
dplyr::distinct() |>
na.omit()
rownames(pc_pairs) <- NULL
# next, ungrouped pairs
ungroup_pc_pairs <- data.frame(grna_id = row.names(ungroup_pairs_all),
response_id = ungroup_pairs_all$known_effect)
saveRDS(pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_grouped.rds"))
saveRDS(ungroup_pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_single.rds"))
}
# finally, do the papalexi protein data
if (paper == "papalexi") {
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
protein_modality <- mm_odm_sub_proc |> get_modality("protein")
x <- grna_assignment_modality |>
get_feature_covariates() |>
dplyr::filter(!is.na(known_protein_effect),
n_nonzero > 0)
pos_control_ungroup <- data.frame(grna_group = row.names(x),
response_id = x$known_protein_effect)
pos_control_group <- x |>
dplyr::select(target, known_protein_effect) |>
dplyr::distinct() |>
dplyr::rename("grna_group" = "target", "response_id" = "known_protein_effect")
row.names(pos_control_group) <- NULL
saveRDS(pos_control_group,
file = paste0(paper_dir, dataset, "/protein/pos_control_pairs_grouped.rds"))
saveRDS(pos_control_ungroup,
file = paste0(paper_dir, dataset, "/protein/pos_control_pairs_single.rds"))
}
}
}
# 1.i) Set the MIMOSCA formula objects
mimosca_formula_objs <- list(# frangieh = formula(~ n_nonzero + n_umis + phase + batch + 0),
frangieh = formula(~ n_nonzero + n_umis + 0),
schraivogel = formula(~ n_nonzero + n_umis + batch + 0),
papalexi = formula(~ n_nonzero + n_umis + bio_rep + p_mito + 0),
liscovitch = formula(~ n_nonzero + n_fragments + 0),
simulated = formula(~ n_nonzero + n_umis + 0))
mimosca_formula_objs_protein <- list(# frangieh = formula(~ n_umis + phase + batch + 0),
frangieh = formula(~ n_umis + 0),
papalexi = formula(~ n_umis + bio_rep + p_mito + 0))
# 1.ii) Set the NB regression formula objects
nb_regression_formula_objs <- list(# frangieh = "~log(n_umis) + log(n_nonzero) + phase + batch",
frangieh = "~log(n_umis) + log(n_nonzero)",
schraivogel = "~ log(n_umis) + log(n_nonzero) + batch",
papalexi = "~ log(n_umis) + log(n_nonzero) + bio_rep + p_mito",
liscovitch = "~ log(n_fragments)",
simulated = "~log(n_umis) + log(n_nonzero)")
nb_regression_formula_objs_protein <- list(# frangieh = "~ offset(log(n_umis)) + phase + batch",
frangieh = "~ offset(log(n_umis))",
papalexi = "~ offset(log(n_umis)) + bio_rep + p_mito")
# 1.iii) Set the sceptre formula objects
sceptre_formula_objs <- list(# frangieh = ~ log(response_n_umis) + log(response_n_nonzero) + phase + batch,
frangieh = ~ log(response_n_umis) + log(response_n_nonzero),
schraivogel = ~ log(response_n_umis) + log(response_n_nonzero) + batch,
papalexi = ~ log(response_n_umis) + log(response_n_nonzero) + bio_rep + p_mito,
liscovitch = ~ log(response_n_fragments),
simulated = ~ log(response_n_umis) + log(response_n_nonzero))
sceptre_formula_objs_protein <- list(# frangieh = ~ log(response_n_umis) + phase + batch,
frangieh = ~ log(response_n_umis),
papalexi = ~ log(response_n_umis) + bio_rep + p_mito)
# 1. iv) Set the global formula object (for use in the sceptre pipeline)
global_formula_objs <- list(# frangieh = ~ log(gene_n_umis) + log(gene_n_nonzero) + phase + batch,
frangieh = ~ log(gene_n_umis) + log(gene_n_nonzero),
schraivogel = ~ log(gene_n_umis) + log(gene_n_nonzero) + batch,
papalexi = ~ log(gene_n_umis) + log(gene_n_nonzero) + bio_rep + p_mito,
liscovitch = ~ log(gene_n_fragments),
simulated = ~ log(gene_n_umis) + log(gene_n_nonzero))
paper
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
# Get CL args
args <- commandArgs(trailingOnly = TRUE)
trial <- as.logical(args[1])
grouped <- as.logical(args[2])
discovery <- as.logical(args[3])
datasets <- args[seq(4, length(args))] |> unique()
# loop over datasets, outputting the positive control pairs
out <- NULL
i
i <- 1L
dataset_name <- datasets[i]
discovery
args
args <- "false true true frangieh/co_culture/gene frangieh/control/gene frangieh/ifn_gamma/gene papalexi/eccite_screen/gene papalexi/eccite_screen/protein schraivogel/enhancer_screen_chr11/gene schraivogel/enhancer_screen_chr8/gene" |> .split_args()
args
trial <- as.logical(args[1])
grouped <- as.logical(args[2])
discovery <- as.logical(args[3])
datasets <- args[seq(4, length(args))] |> unique()
trial
grouped
discovery
datasets
# loop over datasets, outputting the positive control pairs
out <- NULL
i <- 1L
dataset_name <- datasets[i]
discovery
10
30
if (discovery) {
df <- readRDS(paste0(sceptre2_dir, dataset_name), )
} else {
df <- readRDS(paste0(sceptre2_dir, dataset_name,
if (grouped) "/pos_control_pairs_grouped.rds" else "/pos_control_pairs_single.rds"))
}
discovery
datasets
paste0(sceptre2_dir, dataset_name)
i
dataset_name <- datasets[i]
if (discovery) {
df <- readRDS(paste0(sceptre2_dir, dataset_name), "trans_pairs_grouped.rds")
} else {
df <- readRDS(paste0(sceptre2_dir, dataset_name,
if (grouped) "/pos_control_pairs_grouped.rds" else "/pos_control_pairs_single.rds"))
}
dataset_name <- datasets[i]
if (discovery) {
df <- readRDS(paste0(sceptre2_dir, dataset_name, "/trans_pairs_grouped.rds"))
} else {
df <- readRDS(paste0(sceptre2_dir, dataset_name,
if (grouped) "/pos_control_pairs_grouped.rds" else "/pos_control_pairs_single.rds"))
}
df
head(df)
tail(df)
dataset_name <- datasets[i]
if (discovery) {
df <- readRDS(paste0(sceptre2_dir, dataset_name, "/trans_pairs_grouped.rds"))
} else {
df <- readRDS(paste0(sceptre2_dir, dataset_name,
if (grouped) "/pos_control_pairs_grouped.rds" else "/pos_control_pairs_single.rds"))
}
my_idxs <- seq(1L, nrow(df))
my_idxs
trial
my_idxs <- seq(1L, nrow(df))
my_idxs
n_grnas <- length(unique(df$grna_group))
n_grnas
n_grnas <- length(unique(df$grna_group))
my_idxs <- seq(1L, n_grnas)
n_grnas
my_idxs <- seq(1L, n_grnas)
my_idxs
trial
c(out, paste(dataset_name, 1L))
c(out, paste(dataset_name, my_idxs))
##################
# FRANGIEH CONTROL
##################
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
##################
# FRANGIEH CONTROL
##################
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
control_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/")
# gene info
gene_odm_fp <- paste0(control_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(control_dir, "grna_assignment/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(control_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_assignment")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates() |>
dplyr::select(gene_n_nonzero, gene_n_umis)
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# set formulas, grna group target name
formula_object <- mm_odm@global_misc$formula
# set the gene-grna group pairs
response_grna_group_pairs <- sceptre::generate_all_pairs(response_matrix = response_matrix,
grna_group_data_frame = grna_group_data_frame)
# create the list of items to write
l <- list(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object,
response_grna_group_pairs = response_grna_group_pairs)
dir_to_save <- paste0(control_dir)
file_to_save <- paste0(dir_to_save, "r_objects.rds")
saveRDS(object = l, file = file_to_save)
dataset <- "frangieh"
dataset
analysis_type <- args[2] # "calibration" or "discovery"
analysis_type <- "discovery"
cat(dataset); cat("\n")
cat(analysis_type); cat("\n")
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
f_name <- paste0("frangieh_control_", analysis_type, "_res.rds")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
f_name <- paste0("papalexi_gene_", analysis_type, "_res.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
f_name <- paste0("frangieh_control_", analysis_type, "_res.rds")
}
calibration_check <- analysis_type == "calibration"
l <- readRDS(objects_fp)
gc() |> invisible()
res <- run_sceptre_lowmoi(response_matrix = l$response_matrix,
grna_matrix = l$grna_matrix,
covariate_data_frame = l$covariate_data_frame,
grna_group_data_frame = l$grna_group_data_frame,
formula_object = l$formula_object,
response_grna_group_pairs = l$response_grna_group_pairs,
calibration_check = calibration_check)
