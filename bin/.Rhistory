grna_modality
trial
grouped
optional_args
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
pos_control_df <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name),
if (grouped) "/pos_control_pairs_grouped.rds" else  "/pos_control_pairs_single.rds"))
response_odm
grna_dataset_name
grna_odm
pos_control_df
head(pos_control_df)
grouped
grouped <- FALASE
grouped <- FALSE
pos_control_df <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name),
if (grouped) "/pos_control_pairs_grouped.rds" else  "/pos_control_pairs_single.rds"))
pos_control_df
head(pos_control_df)
idx
if (idx > 0) {
pos_control_df <- pos_control_df |> dplyr::slice(idx)
}
if (trial) {
pos_control_df <- pos_control_df |> dplyr::slice(1)
}
pos_control_df
idx
response_odm
grna_odm
response_grna_group_pairs
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
pos_control_df = pos_control_df)
head(to_pass_list)
values_vect <- NULL
names_vect <- NULL
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
to_pass_list
to_pass_list |> length()
result_df <- do.call(what = method_name, args = to_pass_list)
if (!identical(sort(colnames(result_df)), c("grna_group", "p_value", "response_id"))) {
stop(paste0("The output of `", method_name, "` must be a data frame with columns `response_id`, `grna_group`, and `p_value`."))
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
pos_control_df = pos_control_df)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
result_df <- do.call(what = method_name, args = to_pass_list)
method_name
to_pass_list$response_odm
to_pass_list$grna_odm
to_pass_list$pos_control_df
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
# Get CL args; set sceptre2 offsite dir
args <- commandArgs(trailingOnly = TRUE)
args <- "frangieh/control/gene 42 schraivogel_method assignment false true" |> .split_args()
args
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
args <- "frangieh/co_culture/gene 77 mimosca assignment false true n_rep=50" |> .split_args()
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
trial <- as.logical(args[5])
grouped <- as.logical(args[6])
if (length(args) >= 7) {
optional_args <- args[seq(7, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
pos_control_df <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name),
if (grouped) "/pos_control_pairs_grouped.rds" else  "/pos_control_pairs_single.rds"))
response_odm
grna_dataset_name
grna_odm
head(pos_control_df)
head(pos_control_df)
grouped <- FALSE
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
response_odm
grna_dataset_name
grna_odm
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_grouped.rds"))
response_grna_group_pairs
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_single.rds"))
response_grna_group_pairs
grna_odm@feature_covariates |> head()
grna_odm@cell_covariates |> head()
grna_odm@feature_covariates |> head()
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name),
"/pos_control_pairs_single.rds"))
response_grna_group_pairs
grna_odm@feature_covariates |> heaD()
grna_odm@feature_covariates |> head()
grna_odm@feature_covariates
grna_odm@feature_covariates |> head()
sceptre
fisher_exact
abstract_two_sample_test
get_target_assignments_via_max_op
get_grna_assignments_via_max_op
lowmoi:::get_grna_assignments_via_max_op
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name),
"/pos_control_pairs_grouped.rds"))
head(response_grna_group_pairs)
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name),
"/pos_control_pairs_single.rds"))
head(response_grna_group_pairs)
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name),
"/pos_control_pairs_grouped.rds"))
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name),
"/pos_control_pairs_single.rds"))
head(response_grna_group_pairs)
grna_odm@feature_covariates |> head()
grna_odm@feature_covariates$target
row.names(grna_odm@feature_covariates)
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
head(curr_targets)
head(curr_ids)
head(curr_targets)
head(curr_ids)
head(curr_targets)
head(curr_ids)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
curr_ids
head(response_grna_group_pairs)
head(curr_targets)
head(curr_ids)
head(curr_ids)
head(response_grna_group_pairs)
head(curr_targets)
head(curr_ids)
head(response_grna_group_pairs)
grna_odm@feature_covariates |> head()
grna_odm@feature_covariates$target <- curr_ids
grna_odm@feature_covariates |> head()
grna_odm@target
grna_odm@feature_covariates$target
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
# Get CL args; set sceptre2 offsite dir
args <- commandArgs(trailingOnly = TRUE)
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
"frangieh/co_culture/gene 117 schraivogel_method assignment false true" |> .split_args()
"frangieh/co_culture/gene 117 schraivogel_method assignment false true" |> .split_args() -> args
args
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_dir
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
dataset_name
idx
method_name
grna_modality
grouped
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
grouped
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_single.rds"))
head(response_grna_group_pairs)
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_single.rds"))
head(response_grna_group_pairs)
curr_targets <- grna_odm@feature_covariates$target
head(curr_targets)
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
grna_odm
grna_odm@feature_covariates |> head()
source("~/research_code/pc-grna-pipeline/bin/run_method.R")
row.names(grna_odm) <- NULL
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::slice(idx)
}
idx
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::slice(idx)
}
idx
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
# Get CL args; set sceptre2 offsite dir
args <- commandArgs(trailingOnly = TRUE)
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
args
"frangieh/co_culture/gene 117 schraivogel_method assignment false true" |> .split_args() -> args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
response_odm
grna_dataset_name
grna_odm
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
row.names(grna_odm) <- NULL
response_grna_group_pairs
grna_odm |> get_feature_covariates() |> head()
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::slice(idx)
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
method_name
to_pass_list
values_vect <- NULL
names_vect <- NULL
optional_args
dataset_name
idx
method_name
grna_modality
grouped
args[5]
args[6]
args[7]
args[6]
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
if (grouped) {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_grouped.rds"))
} else {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
row.names(grna_odm) <- NULL
}
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::slice(idx)
}
idx
response_grna_group_pairs
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
to_pass_list
!is.null(optional_args)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
!is.null(optional_args)
to_pass_list
args
args <- "frangieh/co_culture/gene 68 mimosca assignment true n_rep=50" |> .split_args()
args <- "papalexi/eccite_screen/gene 0 weissman_method assignment true" |> .split_args()
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
dataset_name
idx
method_name
grna_modality
grouped
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
optional_args
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
if (grouped) {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_grouped.rds"))
} else {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
row.names(grna_odm) <- NULL
}
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
if (grouped) {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_grouped.rds"))
} else {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
row.names(grna_odm) <- NULL
}
response_grna_group_pairs
head(response_grna_group_pairs)
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::slice(idx)
}
response_grna_group_pairs
grouped
"frangieh/co_culture/gene 54 mimosca assignment false n_rep=50" |> .split_args() -> args
args
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
"frangieh/co_culture/gene 54 mimosca assignment false n_rep=50" |> .split_args() -> args
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
grouped
optional_args
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
if (grouped) {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_grouped.rds"))
} else {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
row.names(grna_odm) <- NULL
}
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::slice(idx)
}
response_grna_group_pairs
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
to_pass_list$n_rep
to_pass_list$response_grna_group_pairs
to_pass_list$grna_odm
to_pass_list$grna_odm |> get_feature_covariates() |> head()
to_pass_list$response_odm
result_df <- do.call(what = method_name, args = to_pass_list)
