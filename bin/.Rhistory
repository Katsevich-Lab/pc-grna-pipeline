args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
pairs_file <- args[5]
trial <- as.logical(args[6])
grouped <- as.logical(args[7])
if (length(args) >= 8) {
optional_args <- args[seq(8, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_file))
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
pairs_file <- args[5]
trial <- as.logical(args[6])
grouped <- as.logical(args[7])
if (length(args) >= 8) {
optional_args <- args[seq(8, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_file))
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
unique_grna_groups <- response_grna_group_pairs$grna_group |> unique()
curr_grna_group <- as.character(unique_grna_groups[idx])
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::filter(grna_group == curr_grna_group)
}
if (trial && nrow(response_grna_group_pairs) >= 5) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::sample_n(5)
response_odm <- response_odm[as.character(response_grna_group_pairs$response_id),]
}
# if the analysis is singleton (as opposed to grouped), update the grna odm and pairs to analyze data frame
if (!grouped) {
grna_feature_df <- grna_odm |> get_feature_covariates()
grna_map_df <- data.frame(grna_id = rownames(grna_feature_df),
grna_group = grna_feature_df$target) |>
dplyr::filter(grna_group %in% response_grna_group_pairs$grna_group)
# update the pairs to analyze
response_grna_group_pairs <- dplyr::inner_join(x = response_grna_group_pairs,
y = grna_map_df,
by = "grna_group",
relationship = "many-to-many") |>
dplyr::select(response_id, grna_group = grna_id)
# update the gRNA groupings, putting each gRNA into a group of size 1
grna_feature_df$target <- ifelse(grna_feature_df$target == "non-targeting",
grna_feature_df$target,
rownames(grna_feature_df))
grna_odm@feature_covariates <- grna_feature_df
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
result_df <- do.call(what = method_name, args = to_pass_list)
result_df
"papalexi/eccite_screen/protein 0 seurat_de assignment pos_control_pairs_grouped.rds true true" |> .split_args() -> args
args
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
pairs_file <- args[5]
trial <- as.logical(args[6])
grouped <- as.logical(args[7])
if (length(args) >= 8) {
optional_args <- args[seq(8, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_file))
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
unique_grna_groups <- response_grna_group_pairs$grna_group |> unique()
curr_grna_group <- as.character(unique_grna_groups[idx])
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::filter(grna_group == curr_grna_group)
}
if (trial && nrow(response_grna_group_pairs) >= 5) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::sample_n(5)
response_odm <- response_odm[as.character(response_grna_group_pairs$response_id),]
}
# if the analysis is singleton (as opposed to grouped), update the grna odm and pairs to analyze data frame
if (!grouped) {
grna_feature_df <- grna_odm |> get_feature_covariates()
grna_map_df <- data.frame(grna_id = rownames(grna_feature_df),
grna_group = grna_feature_df$target) |>
dplyr::filter(grna_group %in% response_grna_group_pairs$grna_group)
# update the pairs to analyze
response_grna_group_pairs <- dplyr::inner_join(x = response_grna_group_pairs,
y = grna_map_df,
by = "grna_group",
relationship = "many-to-many") |>
dplyr::select(response_id, grna_group = grna_id)
# update the gRNA groupings, putting each gRNA into a group of size 1
grna_feature_df$target <- ifelse(grna_feature_df$target == "non-targeting",
grna_feature_df$target,
rownames(grna_feature_df))
grna_odm@feature_covariates <- grna_feature_df
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
method_name
to_pass_list
result_df <- do.call(what = method_name, args = to_pass_list)
trial <- FALSE
grouped
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_file))
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
unique_grna_groups <- response_grna_group_pairs$grna_group |> unique()
curr_grna_group <- as.character(unique_grna_groups[idx])
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::filter(grna_group == curr_grna_group)
}
if (trial && nrow(response_grna_group_pairs) >= 5) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::sample_n(5)
response_odm <- response_odm[as.character(response_grna_group_pairs$response_id),]
}
# if the analysis is singleton (as opposed to grouped), update the grna odm and pairs to analyze data frame
if (!grouped) {
grna_feature_df <- grna_odm |> get_feature_covariates()
grna_map_df <- data.frame(grna_id = rownames(grna_feature_df),
grna_group = grna_feature_df$target) |>
dplyr::filter(grna_group %in% response_grna_group_pairs$grna_group)
# update the pairs to analyze
response_grna_group_pairs <- dplyr::inner_join(x = response_grna_group_pairs,
y = grna_map_df,
by = "grna_group",
relationship = "many-to-many") |>
dplyr::select(response_id, grna_group = grna_id)
# update the gRNA groupings, putting each gRNA into a group of size 1
grna_feature_df$target <- ifelse(grna_feature_df$target == "non-targeting",
grna_feature_df$target,
rownames(grna_feature_df))
grna_odm@feature_covariates <- grna_feature_df
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
to_pass_list
result_df <- do.call(what = method_name, args = to_pass_list)
method_name
method_name
response_odm
grna_odm
response_grna_group_pairs
method <- "wilcox"
normalize <- TRUE
# load response data
response_mat <- load_whole_odm(response_odm)
response_mat
# get grna assignments and target assignments
grna_targets <- get_target_assignments_via_max_op(grna_odm)
grna_targets
# create a cell covariate matrix with assignments
cell_metadata <- data.frame(perturbation = grna_targets)
row.names(cell_metadata) <- colnames(response_mat)
response_mat
dim(response_mat)
cell_metadata
head(cell_metadata)
tail(cell_metadata)
head(cell_metadata)
# create seurat object
seurat_obj <- Seurat::CreateSeuratObject(counts = response_mat,
assay = "RNA",
meta.data = cell_metadata)
if (normalize) seurat_obj <- Seurat::NormalizeData(seurat_obj)
seurat_obj
rm(response_mat)
# set the "Idents" to perturbation
Seurat::Idents(seurat_obj) <- "perturbation"
# test for differential expression by looping over grna groups
unique_grna_groups <- as.character(unique(response_grna_group_pairs$grna_group))
unique_grna_groups
unique_grna_groups
curr_grna_group
curr_grna_group <- unique_grna_groups[1]
unique_grna_groups
unique_grna_groups
curr_grna_group <- curr_grna_groups[1]
unique_grna_groups
unique_grna_groups[1] -> curr_grna_group
curr_grna_group
curr_response_grna_group_pairs <- dplyr::filter(response_grna_group_pairs, grna_group == curr_grna_group)
curr_response_grna_group_pairs
curr_grna_group
method
markers_res <- suppressWarnings(Seurat::FindMarkers(object = seurat_obj[curr_response_grna_group_pairs$response_id,],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0))
seurat_obj
curr_response_grna_group_pairs$response_id
seurat_obj[curr_response_grna_group_pairs$response_id,]
seurat_obj[curr_response_grna_group_pairs$response_id,,drop=FALSE]
seurat_obj[curr_response_grna_group_pairs$response_id,]
curr_grna_group
only.pos = FALSE
curr_response_grna_group_pairs
curr_response_grna_group_pairs$response_id
markers_res <- suppressWarnings(Seurat::FindMarkers(object = seurat_obj[curr_response_grna_group_pairs$response_id,],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0))
curr_grna_group
"non-targeting"
only.pos
markers_res
curr_response_grna_group_pairs
markers_res <- suppressWarnings(Seurat::FindMarkers(object = seurat_obj[curr_response_grna_group_pairs$response_id,],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0))
markers_res <- Seurat::FindMarkers(object = seurat_obj[curr_response_grna_group_pairs$response_id,],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
Seurat::FindMarkers(object = seurat_obj[curr_response_grna_group_pairs$response_id,],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
Seurat::FindMarkers
seurat_obj
version(Seurat)
packageVersion("Seurat")
seurat_obj
markers_res <- Seurat::FindMarkers(object = seurat_obj[curr_response_grna_group_pairs$response_id,],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
curr_grna_group
?Seurat::FindMarkers
markers_res <- Seurat::FindMarkers(object = seurat_obj[curr_response_grna_group_pairs$response_id,],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = "Negbinom",
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
markers_res <- Seurat::FindMarkers(object = seurat_obj[curr_response_grna_group_pairs$response_id,],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = "hi",
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
seurat_obj
seurat_obj[curr_response_grna_group_pairs$response_id,]
curr_response_grna_group_pairs
Seurat::FindMarkers(object = seurat_obj,
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
devtools::install_github('immunogenomics/presto')
Seurat::FindMarkers(object = seurat_obj[curr_response_grna_group_pairs$response_id,],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
Seurat::FindMarkers(object = seurat_obj,
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
seurat_obj
seurat_obj["hi",]
seurat_obj["CD86",]
curr_response_grna_group_pairs$response_id
response_id
seurat_obj[curr_response_grna_group_pairs$response_id,]
response_grna_group_pairs
seurat_obj[c("CD86", "PDL2"),]
Seurat::FindMarkers(object = seurat_obj[c("CD86", "PDL2"),],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
Seurat::FindMarkers(object = seurat_obj["CD86",],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
Seurat::FindMarkers(object = seurat_obj["CD86",,drop=FALSE],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
Seurat::FindMarkers(object = seurat_obj["CD86",],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
Seurat::FindMarkers(object = seurat_obj[c("CD86", ""),],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
Seurat::FindMarkers(object = seurat_obj[c("CD86"),],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
seurat_obj
nrow(markers_res) == 0
Seurat::FindMarkers(object = seurat_obj[curr_response_grna_group_pairs$response_id,],
ident.1 = curr_grna_group,
ident.2 = "non-targeting", only.pos = FALSE,
logfc.threshold = 0.0, test.use = method,
min.pct = 0.0, min.cells.feature = 0,
min.cells.group = 0)
curr_response_grna_group_pairs
curr_response_grna_group_pairs$response_id
seurat_obj[curr_response_grna_group_pairs$response_id,]
seurat_obj[curr_response_grna_group_pairs$response_id,]
x <- seurat_obj[curr_response_grna_group_pairs$response_id,]
x@assays
x@assays$RNA
x@assays$RNA$counts
x@assays$RNA$data
curr_response_grna_group_pairs
response_mat
class(response_mat)
# load response data
response_mat <- load_whole_odm(response_odm)
# get grna assignments and target assignments
grna_targets <- get_target_assignments_via_max_op(grna_odm)
# create a cell covariate matrix with assignments
cell_metadata <- data.frame(perturbation = grna_targets)
row.names(cell_metadata) <- colnames(response_mat)
dim(response_mat)
response_mat[1,]
response_mat[1,]seurat_obj <- Seurat::CreateSeuratObject(counts = response_mat,
seurat_obj <- Seurat::CreateSeuratObject(counts = response_mat,
assay = "RNA",
meta.data = cell_metadata)
devtools::install_version("Seurat", version = "4.1.1")
install.packages("spatstat.core")
devtools::install_version("spatstat.core", version = "2.4.4")
devtools::install_version("Seurat", version = "4.1.1")
args <- "papalexi/eccite_screen/protein 0 seurat_de assignment pos_control_pairs_grouped.rds true true" |> .split_args()
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
pairs_file <- args[5]
trial <- as.logical(args[6])
grouped <- as.logical(args[7])
if (length(args) >= 8) {
optional_args <- args[seq(8, length(args))]
} else {
optional_args <- NULL
}
grouped
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_file))
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
unique_grna_groups <- response_grna_group_pairs$grna_group |> unique()
curr_grna_group <- as.character(unique_grna_groups[idx])
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::filter(grna_group == curr_grna_group)
}
if (trial && nrow(response_grna_group_pairs) >= 5) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::sample_n(5)
response_odm <- response_odm[as.character(response_grna_group_pairs$response_id),]
}
# if the analysis is singleton (as opposed to grouped), update the grna odm and pairs to analyze data frame
if (!grouped) {
grna_feature_df <- grna_odm |> get_feature_covariates()
grna_map_df <- data.frame(grna_id = rownames(grna_feature_df),
grna_group = grna_feature_df$target) |>
dplyr::filter(grna_group %in% response_grna_group_pairs$grna_group)
# update the pairs to analyze
response_grna_group_pairs <- dplyr::inner_join(x = response_grna_group_pairs,
y = grna_map_df,
by = "grna_group",
relationship = "many-to-many") |>
dplyr::select(response_id, grna_group = grna_id)
# update the gRNA groupings, putting each gRNA into a group of size 1
grna_feature_df$target <- ifelse(grna_feature_df$target == "non-targeting",
grna_feature_df$target,
rownames(grna_feature_df))
grna_odm@feature_covariates <- grna_feature_df
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
method_name
to_pass_list
result_df <- do.call(what = method_name, args = to_pass_list)
result_df
