"frangieh/ifn_gamma/gene 0 sceptre assignment true sn_approx=FALSE:B=300000" |> .split_args() -> args
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
dataset_name
idx
method_name
grna_modality
grouped
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
optional_args
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
response_odm
grna_dataset_name
grna_odm
grouped
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_grouped.rds"))
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_grouped.rds"))
head(response_grna_group_pairs)
if (grouped) {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_grouped.rds"))
} else {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::rename("grna_group" = "grna_id")
row.names(grna_odm) <- NULL
}
head(response_grna_group_pairs)
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
# Get CL args; set sceptre2 offsite dir
args <- commandArgs(trailingOnly = TRUE)
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
args
args <- "frangieh/ifn_gamma/gene 0 sceptre assignment true sn_approx=FALSE:B=300000" |> .split_args()
args <- commandArgs(trailingOnly = TRUE)
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
args <- "frangieh/ifn_gamma/gene 0 sceptre assignment true sn_approx=FALSE:B=300000" |> .split_args()
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
if (grouped) {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_grouped.rds"))
} else {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::rename("grna_group" = "grna_id")
row.names(grna_odm) <- NULL
}
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::slice(idx)
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
to_pass_list$sn_approx
to_pass_list$response_grna_group_pairs
to_pass_list$response_grna_group_pairs |> head()
to_pass_list$sn_approx
optional_args
values_vect <- NULL
names_vect <- NULL
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
str_split
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
values_vect
names_vect
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_append_list
optional_args <- ""output_amount=1:B=300000:sn_approx=FALSE""
optional_args <- "output_amount=1:B=300000:sn_approx=FALSE"
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
optional_args
tional_args <- strsplit(x = optional_args, split = ":") |> unlist()
va
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
values_vect <- NULL
names_vect <- NULL
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
optional_args
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
to_append_list
to_pass_list
to_pass_list$response_grna_group_pairs <- to_pass_list$response_grna_group_pairs [1:5,]
result_df <- do.call(what = method_name, args = to_pass_list)
to_pass_list
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
if (grouped) {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_grouped.rds"))
} else {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::rename("grna_group" = "grna_id")
row.names(grna_odm) <- NULL
}
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::slice(idx)
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
to_pass_list$sn_approx
to_pass_list$response_grna_group_pairs <- to_pass_list$response_grna_group_pairs[1:5,]
result_df <- do.call(what = method_name, args = to_pass_list)
to_pass_list
to_pass_list$response_grna_group_pairs$grna_group
to_pass_list$response_grna_group_pairs |> head()
"false true  frangieh/co_culture/gene frangieh/control/gene frangieh/ifn_gamma/gene papalexi/eccite_screen/gene schraivogel/enhancer_screen_chr11/gene schraivogel/enhancer_screen_chr8/gene schraivogel/ground_truth_perturbseq/gene schraivogel/ground_truth_tapseq/gene papalexi/eccite_screen/protein" |> .split_args() -> args
args
args
"false true frangieh/co_culture/gene frangieh/control/gene frangieh/ifn_gamma/gene papalexi/eccite_screen/gene schraivogel/enhancer_screen_chr11/gene schraivogel/enhancer_screen_chr8/gene schraivogel/ground_truth_perturbseq/gene schraivogel/ground_truth_tapseq/gene papalexi/eccite_screen/protein" |> .split_args() -> args
args
trial <- as.logical(args[1])
grouped <- as.logical(args[2])
trial
grouped
datasets <- args[seq(3, length(args))] |> unique()
datasets
# loop over datasets, outputting the positive control pairs
out <- NULL
i <- 1
dataset_name <- datasets[i]
sceptre2_dir
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
# Get CL args
args <- commandArgs(trailingOnly = TRUE)
trial <- as.logical(args[1])
grouped <- as.logical(args[2])
datasets <- args[seq(3, length(args))] |> unique()
sceptre2_dir
pos_control_df <- readRDS(paste0(sceptre2_dir, dataset_name,
if (grouped) "/pos_control_pairs_grouped.rds" else  "/pos_control_pairs_single.rds"))
paste0(sceptre2_dir, dataset_name)
paste0(sceptre2_dir, dataset_name,
if (grouped) "/pos_control_pairs_grouped.rds" else  "/pos_control_pairs_single.rds")
grouped
trial
"false true frangieh/co_culture/gene frangieh/control/gene frangieh/ifn_gamma/gene papalexi/eccite_screen/gene schraivogel/enhancer_screen_chr11/gene schraivogel/enhancer_screen_chr8/gene schraivogel/ground_truth_perturbseq/gene schraivogel/ground_truth_tapseq/gene papalexi/eccite_screen/protein" |> .split_args() -> args
trial <- as.logical(args[1])
grouped <- as.logical(args[2])
datasets <- args[seq(3, length(args))] |> unique()
dataset_name <- datasets[i]
pos_control_df <- readRDS(paste0(sceptre2_dir, dataset_name,
if (grouped) "/pos_control_pairs_grouped.rds" else  "/pos_control_pairs_single.rds"))
pos_control_df
my_idxs <- seq(1L, nrow(pos_control_df))
if (trial) {
out <- c(out, paste(dataset_name, 1L))
} else {
out <- c(out, paste(dataset_name, my_idxs))
}
my_idxs
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_dir
"schraivogel/enhancer_screen_chr11/gene 0 sceptre assignment true sn_approx=FALSE:B=300" |> .split_args() -> args
args
dataset_name <- args[1]
dataset_name
idx <- as.integer(args[2])
idx
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
optional_args
grouped
grna_modality
method_name
idx
dataset_name
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
if (grouped) {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_grouped.rds"))
} else {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::rename("grna_group" = "grna_id")
row.names(grna_odm) <- NULL
}
response_grna_group_pairs
sceptre2_dir
paste0(sceptre2_dir, dataset_name)
paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_grouped.rds")
file.exists(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_grouped.rds"))
"frangieh/co_culture/gene 0 sceptre assignment true output_amount=1:B=2500000" |> .split_args() -> args
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
if (grouped) {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_grouped.rds"))
} else {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::rename("grna_group" = "grna_id")
row.names(grna_odm) <- NULL
}
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
if (grouped) {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_grouped.rds"))
} else {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::rename("grna_group" = "grna_id")
row.names(grna_odm) <- NULL
}
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::slice(idx)
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
to_pass_list$response_odm
to_pass_list$grna_odm
to_pass_list$response_grna_group_pairs |> head()
!is.null(optional_args)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
method_name
to_pass_list$response_odm
to_pass_list$grna_odm
to_pass_list$response_grna_group_pairs
result_df <- do.call(what = method_name, args = to_pass_list)
args <- "frangieh/co_culture/gene 0 sceptre assignment true output_amount=1:B=2500000" |> .split_args()
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
if (grouped) {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_grouped.rds"))
} else {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::rename("grna_group" = "grna_id")
row.names(grna_odm) <- NULL
}
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
# Get CL args; set sceptre2 offsite dir
args <- commandArgs(trailingOnly = TRUE)
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
# Get CL args; set sceptre2 offsite dir
args <- commandArgs(trailingOnly = TRUE)
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
args <- "frangieh/co_culture/gene 0 sceptre assignment true output_amount=1:B=2500000" |> .split_args()
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
grouped <- as.logical(args[5])
if (length(args) >= 6) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
if (grouped) {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_grouped.rds"))
} else {
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/pos_control_pairs_single.rds"))
curr_targets <- grna_odm@feature_covariates$target
curr_ids <- row.names(grna_odm@feature_covariates)
curr_ids[curr_targets == "non-targeting"] <- "non-targeting"
grna_odm@feature_covariates$target <- curr_ids
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::rename("grna_group" = "grna_id")
row.names(grna_odm) <- NULL
}
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::slice(idx)
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
method_name
"frangieh/co_culture/gene 0 sceptre assignment true output_amount=1:B=2500000" |> .split_args() -> args
result_df <- do.call(what = method_name, args = to_pass_list)
